#define ll long long;
#define vi vector<int>;
#define vii vector<vi>;
#define pii pair<int, int>;

#define pb push_back // Thêm phần tử vào vector
#define mp make_pair // Tạo cặp số


#define FOR(i, a, b)                \
    for (int i = (a); i < (b); i++) \
        ;

#define RFOR(i, a, b)                \
    for (int i = (a); i >= (b); i--) \
        ;

#define CINARR(arr) \
    FOR(i, 0, arr.size()) { std::cin >> arr[i]; }

#define COUTARR(arr) \
    FOR(i, 0, arr.size()) { std::cout << arr[i] << " "; }

    

#define read(...) \
    __VA_ARGS__;  \
    cin >> __VA_ARGS__;
#define write(...) cout << __VA_ARGS__ << endl;

#define all(x) (x).begin(), (x).end();

#define MOD 1000000007;
#define endl '\n';

#define DEGUG(x) cout << '>' << #x << ':' << x << endl;


// fast input output 

        static const auto speedup = []() {
            std::ios::sync_with_stdio(false);
            std::cin.tie(nullptr);
            std::cout.tie(nullptr);
            return 0;
        }();

//
// Template overload for operator<< to print any type of std::vector
template <typename T>
std::ostream &operator<<(std::ostream &os, const std::vector<T> &vec)
{
    os << "[";
    for (size_t i = 0; i < vec.size(); ++i)
    {
        os << vec[i];
        if (i != vec.size() - 1)
        {
            os << ", ";
        }
    }
    os << "]";
    return os;
}
// Overload the << operator for vector<int>
std::ostream& operator<<(std::ostream& os, const std::vector<int>& vec) {
    os << "[";
    for (size_t i = 0; i < vec.size(); ++i) {
        os << vec[i];
        if (i != vec.size() - 1) {
            os << ", ";
        }
    }
    os << "]";
    return os;
}

// Overload the << operator for vector<vector<int>>
std::ostream& operator<<(std::ostream& os, const std::vector<std::vector<int>>& vec) {
    os << "[\n";
    for (size_t i = 0; i < vec.size(); ++i) {
        os << "  " << vec[i];
        if (i != vec.size() - 1) {
            os << ",\n";
        }
    }
    os << "\n]";
    return os;
}



void runTestCases(const string& filePath) {
    ifstream inputFile(filePath); // Open the file
    if (!inputFile) {
        cerr << "Error: File not found or could not be opened." << endl;
        return;
    }

    int T; // Number of test cases
    inputFile >> T;

    for (int i = 1; i <= T; ++i) {
        int a, b;
        inputFile >> a >> b; // Read the two integers
        int totalProblems = a + b;
        cout << "Case " << i << ": " << totalProblems << endl;
    }

    inputFile.close(); // Close the file
}